class Autogenerated {
  bool? status;
  Data? data;

  Autogenerated({this.status, this.data});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    status = json['status'];
    data = json['data'] != null ? Data.fromJson(json['data']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['status'] = status;
    if (this.data != null) {
      data['data'] = this.data!.toJson();
    }
    return data;
  }
}

class Data {
  List<Chats>? chats;
  int? totalCount;
  bool? hasMore;

  Data({this.chats, this.totalCount, this.hasMore});

  Data.fromJson(Map<String, dynamic> json) {
    if (json['chats'] != null) {
      chats = <Chats>[];
      json['chats'].forEach((v) {
        chats!.add(Chats.fromJson(v));
      });
    }
    totalCount = json['totalCount'];
    hasMore = json['hasMore'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (chats != null) {
      data['chats'] = chats!.map((v) => v.toJson()).toList();
    }
    data['totalCount'] = totalCount;
    data['hasMore'] = hasMore;
    return data;
  }
}

class Chats {
  String? sId;
  ChatLastMessage? chatLastMessage;
  String? chatCompanyName;
  String? chatCompanyCommercialName;
  ClientRequestRef? clientRequestRef;
  ChatCustomerCompanyRef? chatCustomerCompanyRef;
  String? chatCustomerCompanyName;
  String? chatCustomerCommercialName;
  ChatUsers? chatUsers;
  bool? isDeleted;
  bool? isClosed;
  bool? isTicketChat;
  bool? isActive;
  bool? isAdminJoined;
  List<String>? participants;
  String? createdAt;
  String? updatedAt;
  int? chatNotSeenMessages;

  String get id => sId ?? '';

  Chats({
    this.sId,
    this.chatLastMessage,
    this.chatCompanyName,
    this.chatCompanyCommercialName,
    this.clientRequestRef,
    this.chatCustomerCompanyRef,
    this.chatCustomerCompanyName,
    this.chatCustomerCommercialName,
    this.chatUsers,
    this.isDeleted,
    this.isClosed,
    this.isTicketChat,
    this.isActive,
    this.isAdminJoined,
    this.participants,
    this.createdAt,
    this.updatedAt,
    this.chatNotSeenMessages,
  });

  Chats copyWith({
    String? sId,
    ChatLastMessage? chatLastMessage,
    String? chatCompanyName,
    String? chatCompanyCommercialName,
    ClientRequestRef? clientRequestRef,
    ChatCustomerCompanyRef? chatCustomerCompanyRef,
    String? chatCustomerCompanyName,
    String? chatCustomerCommercialName,
    ChatUsers? chatUsers,
    bool? isDeleted,
    bool? isClosed,
    bool? isTicketChat,
    bool? isActive,
    bool? isAdminJoined,
    List<String>? participants,
    String? createdAt,
    String? updatedAt,
    int? chatNotSeenMessages,
  }) {
    return Chats(
      sId: sId ?? this.sId,
      chatLastMessage: chatLastMessage ?? this.chatLastMessage,
      chatCompanyName: chatCompanyName ?? this.chatCompanyName,
      chatCompanyCommercialName:
          chatCompanyCommercialName ?? this.chatCompanyCommercialName,
      clientRequestRef: clientRequestRef ?? this.clientRequestRef,
      chatCustomerCompanyRef:
          chatCustomerCompanyRef ?? this.chatCustomerCompanyRef,
      chatCustomerCompanyName:
          chatCustomerCompanyName ?? this.chatCustomerCompanyName,
      chatCustomerCommercialName:
          chatCustomerCommercialName ?? this.chatCustomerCommercialName,
      chatUsers: chatUsers ?? this.chatUsers,
      isDeleted: isDeleted ?? this.isDeleted,
      isClosed: isClosed ?? this.isClosed,
      isTicketChat: isTicketChat ?? this.isTicketChat,
      isActive: isActive ?? this.isActive,
      isAdminJoined: isAdminJoined ?? this.isAdminJoined,
      participants: participants ?? this.participants,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      chatNotSeenMessages: chatNotSeenMessages ?? this.chatNotSeenMessages,
    );
  }

  Chats.fromJson(Map<String, dynamic> json) {
    sId = json['_id'];
    chatLastMessage = json['chat_last_message'] != null
        ? ChatLastMessage.fromJson(json['chat_last_message'])
        : null;
    chatCompanyName = json['chat_company_name'];
    chatCompanyCommercialName = json['chat_company_commercial_name'];
    clientRequestRef = json['client_request_ref'] != null
        ? ClientRequestRef.fromJson(json['client_request_ref'])
        : null;
    chatCustomerCompanyRef = json['chat_customer_company_ref'] != null
        ? ChatCustomerCompanyRef.fromJson(json['chat_customer_company_ref'])
        : null;
    chatCustomerCompanyName = json['chat_customer_company_name'];
    chatCustomerCommercialName = json['chat_customer_commercial_name'];
    chatUsers = json['chat_users'] != null
        ? ChatUsers.fromJson(json['chat_users'])
        : null;
    isDeleted = json['isDeleted'];
    isClosed = json['isClosed'];
    isTicketChat = json['isTicketChat'];
    isActive = json['isActive'];
    isAdminJoined = json['isAdminJoined'];
    if (json['participants'] != null) {
      participants = <String>[];
      json['participants'].forEach((v) {
        participants!.add(v.toString());
      });
    }
    createdAt = json['createdAt'];
    updatedAt = json['updatedAt'];
    chatNotSeenMessages = json['chat_not_seen_messages'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['_id'] = sId;
    if (chatLastMessage != null) {
      data['chat_last_message'] = chatLastMessage!.toJson();
    }
    data['chat_company_name'] = chatCompanyName;
    data['chat_company_commercial_name'] = chatCompanyCommercialName;
    if (clientRequestRef != null) {
      data['client_request_ref'] = clientRequestRef!.toJson();
    }
    if (chatCustomerCompanyRef != null) {
      data['chat_customer_company_ref'] = chatCustomerCompanyRef!.toJson();
    }
    data['chat_customer_company_name'] = chatCustomerCompanyName;
    data['chat_customer_commercial_name'] = chatCustomerCommercialName;
    if (chatUsers != null) {
      data['chat_users'] = chatUsers!.toJson();
    }
    data['isDeleted'] = isDeleted;
    data['isClosed'] = isClosed;
    data['isTicketChat'] = isTicketChat;
    data['isActive'] = isActive;
    data['isAdminJoined'] = isAdminJoined;
    if (participants != null) {
      data['participants'] = participants;
    }
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['chat_not_seen_messages'] = chatNotSeenMessages;
    return data;
  }
}

class ChatLastMessage {
  String? sId;
  String? messageText;
  String? messageDate;
  String? messageCreator;

  ChatLastMessage({
    this.sId,
    this.messageText,
    this.messageDate,
    this.messageCreator,
  });

  ChatLastMessage.fromJson(Map<String, dynamic> json) {
    sId = json['_id']?.toString();
    messageText = json['messageText']?.toString();
    messageDate = json['messageDate']?.toString();
    messageCreator = json['messageCreator']?.toString();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['_id'] = sId;
    data['messageText'] = messageText;
    data['messageDate'] = messageDate;
    data['messageCreator'] = messageCreator;
    return data;
  }
}

class ClientRequestRef {
  String? customerId;
  String? clientRequestsId;

  ClientRequestRef({this.customerId, this.clientRequestsId});

  ClientRequestRef.fromJson(Map<String, dynamic> json) {
    // Handle both string and number types from API
    final customerIdValue = json['customerId'];
    final clientRequestsIdValue = json['client_requestsId'];

    customerId = customerIdValue?.toString();
    clientRequestsId = clientRequestsIdValue?.toString();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['customerId'] = customerId;
    data['client_requestsId'] = clientRequestsId;
    return data;
  }
}

class ChatCustomerCompanyRef {
  String? customerId;
  CustomerCompaniesId? customerCompaniesId;

  ChatCustomerCompanyRef({this.customerId, this.customerCompaniesId});

  ChatCustomerCompanyRef.fromJson(Map<String, dynamic> json) {
    customerId = json['customerId']?.toString();
    customerCompaniesId = json['customer_companiesId'] != null
        ? CustomerCompaniesId.fromJson(json['customer_companiesId'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['customerId'] = customerId;
    if (customerCompaniesId != null) {
      data['customer_companiesId'] = customerCompaniesId!.toJson();
    }
    return data;
  }
}

class CustomerCompaniesId {
  String? sId;
  String? companyName;
  String? commercialName;
  dynamic commercialNumber;
  int? vATNumber;

  CustomerCompaniesId({
    this.sId,
    this.companyName,
    this.commercialName,
    this.commercialNumber,
    this.vATNumber,
  });

  CustomerCompaniesId.fromJson(Map<String, dynamic> json) {
    sId = json['_id']?.toString();
    companyName = json['companyName']?.toString();
    commercialName = json['commercialName']?.toString();
    commercialNumber = json['commercialNumber'];
    vATNumber = json['vATNumber'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['_id'] = sId;
    data['companyName'] = companyName;
    data['commercialName'] = commercialName;
    data['commercialNumber'] = commercialNumber;
    data['vATNumber'] = vATNumber;
    return data;
  }
}

class ChatUsers {
  String? customerId;
  CompanyId? companyId;
  SubaccountId? subaccountId;

  ChatUsers({this.customerId, this.companyId, this.subaccountId});

  ChatUsers.fromJson(Map<String, dynamic> json) {
    customerId = json['customerId']?.toString();
    companyId = json['companyId'] != null
        ? CompanyId.fromJson(json['companyId'])
        : null;

    // Handle subaccountId - it can be either a String or a Map
    final subaccountIdValue = json['subaccountId'];
    if (subaccountIdValue is Map<String, dynamic>) {
      subaccountId = SubaccountId.fromJson(subaccountIdValue);
    } else if (subaccountIdValue is String) {
      subaccountId = SubaccountId(sId: subaccountIdValue);
    } else {
      subaccountId = null;
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['customerId'] = customerId;
    if (companyId != null) {
      data['companyId'] = companyId!.toJson();
    }
    if (subaccountId != null) {
      data['subaccountId'] = subaccountId!.toJson();
    }
    return data;
  }
}

class CompanyId {
  String? sId;
  String? companyName;
  String? commercialName;
  dynamic commercialNumber;
  String? publicName;
  int? vATNumber;
  String? photoUrl;

  CompanyId({
    this.sId,
    this.companyName,
    this.commercialName,
    this.publicName,
    this.commercialNumber,
    this.vATNumber,
    this.photoUrl,
  });

  CompanyId.fromJson(Map<String, dynamic> json) {
    sId = json['_id']?.toString();
    companyName = json['companyName']?.toString();
    commercialName = json['commercialName']?.toString();
    commercialNumber = json['commercialNumber'];
    vATNumber = json['vATNumber'];
    publicName = json['publicName']?.toString();
    photoUrl = json['photoUrl']?.toString();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['_id'] = sId;
    data['companyName'] = companyName;
    data['commercialName'] = commercialName;
    data['commercialNumber'] = commercialNumber;
    data['vATNumber'] = vATNumber;
    data['publicName'] = publicName;
    data['photoUrl'] = photoUrl;
    return data;
  }
}

class SubaccountId {
  String? sId;
  String? username;

  SubaccountId({this.sId, this.username});

  SubaccountId.fromJson(Map<String, dynamic> json) {
    sId = json['_id']?.toString();
    username = json['username']?.toString();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['_id'] = sId;
    data['username'] = username;
    return data;
  }
}

class MessageCreator {
  final String id;
  final String role;
  final String? username;
  final String? photoUrl;

  MessageCreator({
    required this.id,
    required this.role,
    this.username,
    this.photoUrl,
  });

  factory MessageCreator.fromJson(Map<String, dynamic> json) {
    return MessageCreator(
      id: json['_id'] ?? '',
      role: json['role'] ?? '',
      username: json['username'],
      photoUrl: json['photoUrl'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      '_id': id,
      'role': role,
      'username': username,
      'photoUrl': photoUrl,
    };
  }
}

class ChatMessage {
  final String id;
  final String? messageText;
  final DateTime? messageDate;
  final MessageCreator? messageCreator;
  final bool? isRead;
  final bool? isSeen;
  final bool? isReceived;
  final bool? isDelivered;
  final bool? isDeleted;
  final List<String>? messagePhotos;
  final List<String>? messageVideos;
  final String? messageVideo;
  final String? messageDocument;
  final Map<String, dynamic>? location;
  final dynamic messageInvoiceRef;
  final Map<String, dynamic>? invoice;
  final Map<String, dynamic>? invoiceData;
  final String? messageType;
  final dynamic messageInvoice;
  final String? messageCreatorRole;
  final String? messageAudio;
  final bool? isFailed;
  final String? errorMessage;
  final bool? isTemp;
  final ChatUsers? chatUsers;
  final ChatCustomerCompanyRef? chatCustomerCompanyRef;
  final String? clientMessageId;

  ChatMessage({
    required this.id,
    this.messageText,
    this.messageDate,
    this.messageCreator,
    this.isRead,
    this.isSeen,
    this.isReceived,
    this.isDelivered,
    this.isDeleted,
    this.messagePhotos,
    this.messageVideos,
    this.messageVideo,
    this.messageDocument,
    this.location,
    this.messageInvoiceRef,
    this.invoice,
    this.invoiceData,
    this.messageType,
    this.messageInvoice,
    this.messageCreatorRole,
    this.messageAudio,
    this.isFailed,
    this.errorMessage,
    this.isTemp,
    this.chatUsers,
    this.chatCustomerCompanyRef,
    this.clientMessageId,
  });

  factory ChatMessage.fromJson(Map<String, dynamic> json) {
    // Handle messageCreator field - support both String and Map formats
    MessageCreator? creator;
    if (json['messageCreator'] is Map) {
      creator = MessageCreator.fromJson(json['messageCreator']);
    } else if (json['messageCreator'] is String) {
      creator = MessageCreator(
        id: json['messageCreator'],
        role: json['messageCreatorRole']?.toString() ?? 'unknown',
      );
    } else if (json['messageCreator'] != null) {
      // Try to parse as Map if it's not null
      try {
        if (json['messageCreator'] is Map) {
          creator = MessageCreator.fromJson(json['messageCreator']);
        }
      } catch (e) {
        // Fallback to string
        creator = MessageCreator(
          id: json['messageCreator'].toString(),
          role: json['messageCreatorRole']?.toString() ?? 'unknown',
        );
      }
    }

    // Handle location data
    Map<String, dynamic>? locationData;
    if (json['location'] != null && json['location'] is Map) {
      locationData = Map<String, dynamic>.from(json['location']);
    } else if (json['messageLocation'] != null &&
        json['messageLocation'] is Map) {
      locationData = Map<String, dynamic>.from(json['messageLocation']);
    }

    // try to extract from messageLocationString
    if (locationData == null &&
        (json['messageText'] == '[LOCATION]' ||
            json['messageText']?.toString().contains('[LOCATION]') == true)) {
      if (json['messageLocationString'] != null) {
        try {
          final locationString = json['messageLocationString'].toString();
          final parts = locationString.split(', ');
          if (parts.length >= 2) {
            final lat = double.tryParse(parts[0]) ?? 0.0;
            final lng = double.tryParse(parts[1]) ?? 0.0;
            locationData = {
              'latitude': lat,
              'longitude': lng,
              'address': locationString,
            };
          }
        } catch (e) {
          // If all parsing fails, create a default location
          locationData = {
            'latitude': 0.0,
            'longitude': 0.0,
            'address': 'Location',
          };
        }
      }
    }

    // Handle messageDocument field
    String? messageDocument;
    if (json['messageDocument'] != null &&
        json['messageDocument'].toString().isNotEmpty) {
      messageDocument = json['messageDocument'].toString();
    } else if (json['messageDocs'] != null &&
        json['messageDocs'] is List &&
        (json['messageDocs'] as List).isNotEmpty) {
      messageDocument = json['messageDocs'].toString();
    }

    // Handle video messages - Updated to match the expected format from screenshot
    String? messageText = json['messageText']?.toString();
    String? messageVideo = json['messageVideo']?.toString();

    // Check if this is a video message by looking at messageType or messageVideo field
    bool isVideoMessage = false;

    // Check messageType field first
    if (json['messageType']?.toString() == 'video') {
      isVideoMessage = true;
    }

    // Check if messageVideo field exists and is not empty
    if (messageVideo != null && messageVideo.isNotEmpty) {
      isVideoMessage = true;
    }

    // Check if messageText indicates video
    if (messageText == '[VIDEO]' || messageText == '[Video]') {
      isVideoMessage = true;
    }

    // Handle video message format
    if (isVideoMessage) {
      // Check for video URL in various fields
      if (messageVideo == null || messageVideo.isEmpty) {
        // Try alternative video URL fields
        messageVideo = json['fileUrl']?.toString() ??
            json['videoUrl']?.toString() ??
            json['video_url']?.toString();
      }

      // If still no video URL, check messageVideos array
      if ((messageVideo == null || messageVideo.isEmpty) &&
          json['messageVideos'] != null &&
          json['messageVideos'] is List &&
          (json['messageVideos'] as List).isNotEmpty) {
        messageVideo = json['messageVideos'][0].toString();
      }

      // Ensure messageText is set to [VIDEO] for consistency
      messageText = '[VIDEO]';

      print('🎥 Video message detected:');
      print('🎥 - messageType: ${json['messageType']}');
      print('🎥 - messageVideo: $messageVideo');
      print('🎥 - messageText: $messageText');
      print('🎥 - fileUrl: ${json['fileUrl']}');
    }

    // Handle invoice data robustly - support all three response formats
    Map<String, dynamic>? invoiceData;
    if (json['invoiceData'] != null && json['invoiceData'] is Map) {
      // Format 1: Direct invoiceData field (first response)
      invoiceData = Map<String, dynamic>.from(json['invoiceData']);
    } else if (json['invoice'] != null && json['invoice'] is Map) {
      // Format 2: invoice field (legacy)
      invoiceData = Map<String, dynamic>.from(json['invoice']);
    } else if (json['Invoice'] != null && json['Invoice'] is Map) {
      // Format 3: Invoice field (legacy)
      invoiceData = Map<String, dynamic>.from(json['Invoice']);
    }

    // Handle messageInvoiceRef field
    dynamic messageInvoiceRef;
    if (json['messageInvoiceRef'] != null) {
      messageInvoiceRef = json['messageInvoiceRef'];
    } else if (json['invoiceRef'] != null) {
      messageInvoiceRef = json['invoiceRef'];
    } else if (json['invoice_id'] != null) {
      messageInvoiceRef = json['invoice_id'];
    } else if (json['invoiceId'] != null) {
      messageInvoiceRef = json['invoiceId'];
    }

    return ChatMessage(
      id: json['_id']?.toString() ?? json['message_id']?.toString() ?? '',
      messageText: messageText,
      messageDate: json['messageDate'] != null
          ? DateTime.parse(json['messageDate'].toString())
          : json['messageDateString'] != null
              ? DateTime.parse(json['messageDateString'].toString())
              : null,
      messageCreator: creator,
      isRead: json['isRead'] as bool? ?? json['isSeen'] as bool? ?? false,
      isSeen: json['isSeen'] as bool?,
      isReceived: json['isReceived'] as bool?,
      isDelivered: json['isDelivered'] as bool?,
      isDeleted: json['isDeleted'] as bool? ?? false,
      messagePhotos: (json['messagePhotos'] as List<dynamic>?)
          ?.map((e) => e.toString())
          .toList(),
      messageVideos: (json['messageVideos'] as List<dynamic>?)
          ?.map((e) => e.toString())
          .toList(),
      messageVideo: messageVideo,
      messageDocument: messageDocument,
      location: locationData,
      messageInvoiceRef: messageInvoiceRef,
      invoice: invoiceData,
      invoiceData: invoiceData,
      messageType: json['messageType']?.toString(),
      messageInvoice: json['messageInvoice'],
      messageCreatorRole: json['messageCreatorRole']?.toString() ??
          json['senderDisplayRole']?.toString(),
      messageAudio: json['messageAudio']?.toString(),
      isFailed: json['isFailed'] as bool? ?? false,
      errorMessage: json['errorMessage']?.toString(),
      isTemp: json['isTemp'] as bool? ?? false,
      chatUsers: json['chat_users'] != null
          ? ChatUsers.fromJson(json['chat_users'])
          : null,
      chatCustomerCompanyRef: json['chat_customer_company_ref'] != null
          ? ChatCustomerCompanyRef.fromJson(json['chat_customer_company_ref'])
          : null,
      clientMessageId: json['client_message_id']?.toString() ??
          json['clientMessageId']?.toString(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      '_id': id,
      'messageText': messageText,
      'messageDate': messageDate?.toIso8601String(),
      'messageCreator': messageCreator?.toJson(),
      'isRead': isRead,
      'isSeen': isSeen,
      'isReceived': isReceived,
      'isDelivered': isDelivered,
      'isDeleted': isDeleted,
      'messagePhotos': messagePhotos,
      'messageVideos': messageVideos,
      'messageVideo': messageVideo,
      'messageDocument': messageDocument,
      'location': location,
      'messageInvoiceRef': messageInvoiceRef,
      'invoice': invoice,
      'invoiceData': invoiceData,
      'messageType': messageType,
      'messageInvoice': messageInvoice,
      'messageCreatorRole': messageCreatorRole,
      'messageAudio': messageAudio,
      'isFailed': isFailed,
      'errorMessage': errorMessage,
      'isTemp': isTemp,
      'chat_users': chatUsers?.toJson(),
      'chat_customer_company_ref': chatCustomerCompanyRef?.toJson(),
      'client_message_id': clientMessageId,
    };
  }

  ChatMessage copyWith({
    String? id,
    String? messageText,
    DateTime? messageDate,
    MessageCreator? messageCreator,
    String? messageCreatorRole,
    bool? isSeen,
    bool? isRead,
    bool? isReceived,
    bool? isDelivered,
    String? chatId,
    String? clientMessageId,
    List<String>? messagePhotos,
    List<String>? messageVideos,
    String? messageVideo,
    String? messageDocument,
    Map<String, dynamic>? location,
    dynamic messageInvoice,
    dynamic messageInvoiceRef,
    Map<String, dynamic>? invoiceData,
    String? messageType,
    String? messageAudio,
    bool? isTemp,
    bool? isDeleted,
  }) {
    return ChatMessage(
      id: id ?? this.id,
      messageText: messageText ?? this.messageText,
      messageDate: messageDate ?? this.messageDate,
      messageCreator: messageCreator ?? this.messageCreator,
      isRead: isRead ?? this.isRead,
      isSeen: isSeen ?? this.isSeen,
      isReceived: isReceived ?? this.isReceived,
      isDelivered: isDelivered ?? this.isDelivered,
      isDeleted: isDeleted ?? this.isDeleted,
      messagePhotos: messagePhotos ?? this.messagePhotos,
      messageVideos: messageVideos ?? this.messageVideos,
      messageVideo: messageVideo ?? this.messageVideo,
      messageDocument: messageDocument ?? this.messageDocument,
      location: location ?? this.location,
      messageInvoiceRef: messageInvoiceRef ?? this.messageInvoiceRef,
      invoice: invoice,
      invoiceData: invoiceData ?? this.invoiceData,
      messageType: messageType ?? this.messageType,
      messageInvoice: messageInvoice ?? this.messageInvoice,
      messageCreatorRole: messageCreatorRole ?? this.messageCreatorRole,
      messageAudio: messageAudio ?? this.messageAudio,
      isFailed: isFailed ?? isFailed,
      errorMessage: errorMessage ?? errorMessage,
      isTemp: isTemp ?? this.isTemp,
      chatUsers: chatUsers,
      chatCustomerCompanyRef: chatCustomerCompanyRef,
      clientMessageId: clientMessageId ?? this.clientMessageId,
    );
  }
}
